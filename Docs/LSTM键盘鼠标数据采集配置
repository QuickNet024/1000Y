# 需求文档：玩家按键数据采集系统


## 1. 项目概述
本项目旨在开发一个 **玩家按键数据采集系统**，用于记录玩家在游戏《笑傲千年》中的键盘和鼠标操作数据。采集的数据将用于训练 LSTM 模型，以实现对玩家行为的预测和分析。

---

## 2. 目标
- 实时采集玩家的键盘和鼠标操作数据。
- 将采集的数据保存为结构化格式（JSON），便于后续处理和分析。
- 支持根据配置文件动态映射操作事件到动作标签。
- 提供高效、可靠的数据采集和存储机制。
- **移动方向计算**：根据中心点坐标 `[basic_actions.move.center_point]` 和屏幕坐标比例 `[basic_actions.move.coordinate_Screen_ratio]` 计算角度，确定移动方向并记录到文件中。

---

## 3. 功能需求

### 3.1 数据采集模块
#### 3.1.1 键盘事件采集
- **按键范围**：根据 `key_mappings` 中定义的按键进行采集，之外的按键不采集。
- 监听玩家的按键按下（`key_press`）和释放（`key_release`）事件。
- 记录以下信息：
  - 按键名称（如 `w`、`F6`）。
  - 事件类型（`key_press` 或 `key_release`）。
  - 时间戳（精确到毫秒）。

#### 3.1.2 鼠标事件采集
- **坐标范围**：根据 `control_range` 中定义的坐标范围采集鼠标数据，超出范围的不采集。
- **按键范围**：根据 `key_mappings` 中定义的鼠标按键进行采集，之外的按键不采集。
- 监听玩家的鼠标点击（`click`）事件，移动（`move`）和滚动（`scroll`）事件不记录。
- 记录以下信息：
  - 鼠标按钮（如 `left`、`right`）。
  - 事件类型（`mouse_click`）。
  - 鼠标点击坐标（`x`、`y`）。
  - 时间戳（精确到毫秒）。

#### 3.1.3 移动方向计算
- **计算逻辑**：
  - 根据 `basic_actions.move.center_point`（中心点坐标）和 `basic_actions.move.coordinate_Screen_ratio`（屏幕坐标比例），计算鼠标点击位置与中心点的角度。
  - 根据角度确定移动方向（如“上”、“右上”等）。
- **记录方式**：
  - 将移动方向映射为 `w`、`a`、`s`、`d` 等按键事件，记录到文件中。

#### 3.1.4 数据保存
- **文件命名规则**：`recorded_data_YYYYMMDD_HHMMSS.json`。
- **文件保存路径**：根据配置文件中的 `save_dir` 项指定，默认为 `B:/1000Y_DATA_TEMP/data/input_records/`。
- **数据文件**：
  - **事件历史记录集**：记录原始事件数据。
  - **事件映射表记录集**：记录映射后的动作标签数据。

---

### 3.2 配置文件解析模块
- 解析配置文件（`config.yaml`），获取以下信息：
  - 游戏操作范围（`control_range`）。
  - 动作记录配置（`action_recording`）。
  - 基础动作配置（`basic_actions`）。
  - 动作映射表（`action_mapping`）。
  - 动作标签字典（`labels_dict`）。

---

### 3.3 动作映射模块
- 根据配置文件中的 `action_mapping`，将原始事件映射为动作标签。
- 支持组合键映射（如 `shift + 鼠标左键` → 动作标签 `37`）。
- 示例：
  - 按下 `w` 键 → 动作标签 `4`（“上”）。
  - 按下 `F6` 键 → 动作标签 `12`（“近战武功-1”）。

---

### 3.4 动作序列模块
- **暂不开发**：等待后期扩展。

---

### 3.5 数据预处理模块
- **数据清洗**：
  - 过滤无效事件（如无意义的鼠标移动）。
  - 去除重复事件。
- **时间序列生成**：
  - 将动作标签按时间顺序排列，生成时间序列数据。
- **数据分割**：
  - 将数据分为训练集和测试集。
- **移动模式支持**：
  - 根据 `basic_actions.move.default_mode` 项，支持键盘移动和鼠标移动两种模式。
- **组合键处理**：
  - 根据 `key_combo_dict` 判定是否为组合键，并映射为对应的动作标签。

---

### 3.6 性能要求
- **实时性**：数据采集模块需高效运行，避免影响游戏性能。
- **存储效率**：支持大文件的高效写入。
- **兼容性**：支持 Windows 系统。

---

## 4. 非功能需求

### 4.1 可扩展性
- 支持动态加载配置文件，方便后续扩展新的动作和序列。

### 4.2 安全性
- 确保采集的数据仅用于项目目的，避免泄露用户隐私。

### 4.3 易用性
- 提供清晰的日志输出，方便调试和监控。

---

## 5. 技术栈
- **开发语言**：Python
- **数据采集**：`pynput` 库
- **配置文件解析**：`yaml` 或 `json`
- **数据存储**：JSON 文件
- **数据处理**：`pandas`、`numpy`
- **模型训练**：`TensorFlow` 或 `PyTorch`

---

## 6. 数据格式

### 6.1 采集数据示例
```json
[
  {
    "timestamp": "1737116450000",
    "type": "key_press",
    "key": "w"
  },
  {
    "timestamp": "1737116450000",
    "type": "mouse_click",
    "button": "Button.left",
    "pressed": true,
    "x": 520,
    "y": 346
  }
]